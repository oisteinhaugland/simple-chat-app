{"version":3,"sources":["Components/ChatMessage.js","Components/Signup.js","Components/MessageList.js","Components/Input.js","Components/ChatApp.js","App.js","serviceWorker.js","index.js"],"names":["ChatMessage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeView","bind","assertThisInitialized","react_default","a","createElement","className","onClick","Component","Signup","state","username","handleChange","handleSubmit","e","setState","target","value","preventDefault","onSubmit","htmlFor","type","name","onChange","MessageList","messages","map","message","index","key","senderId","text","Input","ChatApp","currentUser","currentRoom","users","addMessage","_this2","ChatManager","instanceLocator","userId","currentId","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","roomId","messageLimit","hooks","onMessage","concat","toConsumableArray","userIds","catch","error","console","log","sendMessage","id","Components_MessageList","Components_Input","chatkit","Chatkit","App","currentUsername","currentView","createUser","err","status","view","Components_ChatMessage","Components_Signup","Components_ChatApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62321604.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass  ChatMessage extends Component {\n    constructor(props) {\n        super(props);\n        this.changeView = this.changeView.bind(this);\n    }\n    changeView() {\n        this.props.changeView('signup')\n    }\n    render() {\n        return (\n            <div>\n                <button className=\"chat-button\" onClick={this.changeView}>Send</button>\n            </div>\n        )\n    }\n}\nexport default ChatMessage;","import React, {Component} from 'react';\n\n    class  Signup extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                username: \"\",\n            }\n            this.handleChange = this.handleChange.bind(this);\n            this.handleSubmit = this.handleSubmit.bind(this);\n        }\n        handleChange(e) {\n            this.setState({username: e.target.value});\n        }\n        handleSubmit(e) {\n            e.preventDefault()\n            this.props.onSubmit(this.state.username);\n        }\n        render() {\n            return(\n                <div className=\"form-container\">\n                    <h1>Let's Talk</h1>\n                    <form onSubmit={this.handleSubmit} className=\"form\">\n                        <label htmlFor=\"email\">Lag deg et brukernavn!</label>\n                        <input type=\"text\" name=\"username\" onChange={this.handleChange} className=\"input\" />\n                        <button className=\"submit\">Send</button>\n                    </form>\n                </div>\n            )\n        }\n    }\n    export default Signup;","import React, {Component} from 'react';\n\nclass MessageList extends Component {\n    render() {\n        return(\n            <ul className=\"message-list\">\n                {this.props.messages.map((message, index) => (\n                    <li key={index}>\n                        <h4 className=\"message-sender\">{message.senderId}</h4>\n                        <p className=\"message-text\">{message.text}</p>\n                    </li>\n                ))}\n                <li></li>\n            </ul>\n        )\n    }\n}\nexport default MessageList;","import React, {Component} from 'react';\n\nclass Input extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(e) {\n        this.setState({\n            message: e.target.value\n        })\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onSubmit(this.state.message);\n        this.setState({\n            message: ''\n        })\n    }\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"input-field\">\n                <input className=\"message-input\" type=\"text\" onChange={this.handleChange} value={this.state.message}/>\n                <input className=\"message-submit\" type=\"submit\" value=\"Send\" />   \n            </form>\n        )\n    }\n}\n\nexport default Input;","import React , {Component} from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\n\nimport Input from './Input';\n\nclass ChatApp extends Component {\n    constructor(props) {\n        super(props); \n        this.state = {\n            currentUser: null,\n            currentRoom: { users: [] },\n            messages: [],\n            users: []\n        }\n        this.addMessage = this.addMessage.bind(this);\n    }\n\n\n    componentDidMount() {\n        const chatManager = new ChatManager({\n            instanceLocator: \"v1:us1:372e9db9-ec86-4f22-aa3c-e63e03d57289\",\n            userId: this.props.currentId,\n            tokenProvider: new TokenProvider({\n                url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/372e9db9-ec86-4f22-aa3c-e63e03d57289/token\"\n            })\n        })\n         chatManager\n            .connect()\n            .then(currentUser => {\n                this.setState({ currentUser: currentUser })\n                return currentUser.subscribeToRoom({\n                    roomId: \"19405949\",\n                    messageLimit: 100,\n                    hooks: {\n                        onMessage: message => {\n                            this.setState({\n                                messages: [...this.state.messages, message],\n                            })\n                        },\n                    }\n                })\n            })\n            .then(currentRoom => {\n                this.setState({\n                    currentRoom,\n                    users: currentRoom.userIds\n                })\n            })\n            .catch(error => console.log(error))\n        }\n    \n        addMessage(text) {\n            this.state.currentUser.sendMessage({\n                text,\n                roomId: this.state.currentRoom.id\n            })\n            .catch(error => console.error('error', error));\n        }\n        render() {\n            return (\n                <div>\n                    <h2 className=\"header\">Heisann! Spør oss om noe</h2>\n                    <MessageList messages={this.state.messages} />\n                    <Input className=\"input-field\" onSubmit={this.addMessage} />\n                </div>\n            )\n        }\n}\n\nexport default ChatApp;","   // src/App.js\n\n   import React, { Component } from 'react';\n   import ChatMessage from './Components/ChatMessage';\n   import Signup from './Components/Signup';\n   import ChatApp from './Components/ChatApp';\n\n   import { default as Chatkit } from '@pusher/chatkit-server';\n\n    const chatkit = new Chatkit({\n      instanceLocator: \"v1:us1:372e9db9-ec86-4f22-aa3c-e63e03d57289\",\n      key: \"0f6d0989-3c36-424f-ac9d-a43816dd5355:uSTNfJXbD9vEaYFJxbQpnGNYm1nhjxWcHxx2mkAbiZc=\"\n    })\n\n    class App extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                currentUsername: '',\n                currentId: '',\n                currentView: 'signup'\n            }\n            this.changeView = this.changeView.bind(this);\n            this.createUser = this.createUser.bind(this);\n        }\n\n        createUser(username) {\n            chatkit.createUser({\n                id: username,\n                name: username,\n            })\n            .then((currentUser) => {\n                this.setState({\n                    currentUsername: username,\n                    currentId: username,\n                    currentView: 'chatApp'\n                })\n            }).catch((err) => {\n                     if(err.status === 400) {\n                    this.setState({\n                        currentUsername: username,\n                        currentId: username,\n                        currentView: 'chatApp'\n                    })\n                } else {\n                    console.log(err.status);\n                }\n            });\n        }\n\n      changeView(view) {\n          this.setState({\n              currentView: view\n          })\n      }\n\n      render() {\n            let view ='';\n\n            if (this.state.currentView === \"ChatMessage\") {\n                view = <ChatMessage  changeView={this.changeView}/>\n            } else if (this.state.currentView === \"signup\") {\n                view = <Signup onSubmit={this.createUser}/>\n            } else if (this.state.currentView === \"chatApp\") {\n                view = <ChatApp currentId={this.state.currentId} />\n            }\n            return (\n                <div className=\"App\">\n                    {view}\n                </div>\n            );\n        }\n    }\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}